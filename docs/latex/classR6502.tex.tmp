\hypertarget{classR6502}{}\doxysection{R6502 Class Reference}
\label{classR6502}\index{R6502@{R6502}}


Collaboration diagram for R6502\+:
% FIG 0
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}}
\end{DoxyCompactItemize}
\doxysubsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_ae4140f2a4a989aee58a94b6e015a965f}\label{classR6502_ae4140f2a4a989aee58a94b6e015a965f}} 
{\bfseries R6502} (\mbox{\hyperlink{classMemory}{Memory}} \&)
\item 
\mbox{\Hypertarget{classR6502_ac2c953dfe859abf412b739cba0ff8a8c}\label{classR6502_ac2c953dfe859abf412b739cba0ff8a8c}} 
void {\bfseries init} ()
\begin{DoxyCompactList}\small\item\em Init CPU for emulation. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a901623838e58b817967948dbeba88c59}\label{classR6502_a901623838e58b817967948dbeba88c59}} 
void {\bfseries clock} ()
\begin{DoxyCompactList}\small\item\em Start CPU clock. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a2737d72976d543cd11d6d23531844b48}{RES}} ()
\begin{DoxyCompactList}\small\item\em Reset command. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}{IRQ}} ()
\begin{DoxyCompactList}\small\item\em IRQ interrupt sequence command. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}{NMI}} ()
\begin{DoxyCompactList}\small\item\em NMI interrupt sequence command. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Private Types}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_aa6313af3b3517f51a31a049c2fd36cc0}\label{classR6502_aa6313af3b3517f51a31a049c2fd36cc0}} 
enum {\bfseries FLAGS} \{ \newline
{\bfseries N} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 7
, {\bfseries V} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 6
, {\bfseries U} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 5
, {\bfseries B} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 4
, \newline
{\bfseries D} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 3
, {\bfseries I} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 2
, {\bfseries Z} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 1
, {\bfseries C} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 0
 \}
\item 
\mbox{\Hypertarget{classR6502_ac0b772ec09dc191f0dcb44f7ba836730}\label{classR6502_ac0b772ec09dc191f0dcb44f7ba836730}} 
enum {\bfseries MODES} \{ \newline
{\bfseries NULLMODE}
, {\bfseries IMMEDIATE}
, {\bfseries ABSOLUTE}
, {\bfseries ABSOLUTEX}
, \newline
{\bfseries ABSOLUTEY}
, {\bfseries IMPLIED}
, {\bfseries ACCUMULATOR}
, {\bfseries ZEROPAGE}
, \newline
{\bfseries ZEROPAGEX}
, {\bfseries ZEROPAGEY}
, {\bfseries RELATIVE}
, {\bfseries INDIRECT}
, \newline
{\bfseries INDIRECTX}
, {\bfseries INDIRECTY}
 \}
\item 
\mbox{\Hypertarget{classR6502_a11b1c791c7387dafddebf6b73b5b7d66}\label{classR6502_a11b1c791c7387dafddebf6b73b5b7d66}} 
enum {\bfseries OPS} \{ \newline
{\bfseries NULLOP}
, {\bfseries ADC}
, {\bfseries AND}
, {\bfseries ASL}
, \newline
{\bfseries BCC}
, {\bfseries BCS}
, {\bfseries BEQ}
, {\bfseries BIT}
, \newline
{\bfseries BMI}
, {\bfseries BNE}
, {\bfseries BPL}
, {\bfseries BRK}
, \newline
{\bfseries BVC}
, {\bfseries BVS}
, {\bfseries CLC}
, {\bfseries CLD}
, \newline
{\bfseries CLI}
, {\bfseries CLV}
, {\bfseries CMP}
, {\bfseries CPX}
, \newline
{\bfseries CPY}
, {\bfseries DEC}
, {\bfseries DEX}
, {\bfseries DEY}
, \newline
{\bfseries EOR}
, {\bfseries INC}
, {\bfseries INX}
, {\bfseries INY}
, \newline
{\bfseries JMP}
, {\bfseries JSR}
, {\bfseries LDA}
, {\bfseries LDX}
, \newline
{\bfseries LDY}
, {\bfseries LSR}
, {\bfseries NOP}
, {\bfseries ORA}
, \newline
{\bfseries PHA}
, {\bfseries PHP}
, {\bfseries PLA}
, {\bfseries PLP}
, \newline
{\bfseries ROL}
, {\bfseries ROR}
, {\bfseries RTI}
, {\bfseries RTS}
, \newline
{\bfseries SBC}
, {\bfseries SEC}
, {\bfseries SED}
, {\bfseries SEI}
, \newline
{\bfseries STA}
, {\bfseries STX}
, {\bfseries STY}
, {\bfseries TAX}
, \newline
{\bfseries TAY}
, {\bfseries TSX}
, {\bfseries TXA}
, {\bfseries TXS}
, \newline
{\bfseries TYA}
 \}
\end{DoxyCompactItemize}
\doxysubsection*{Private Member Functions}
\begin{DoxyCompactItemize}
\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}{read}} (uint16\+\_\+t addr)
\begin{DoxyCompactList}\small\item\em Read byte at address. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_a4e1cd10e7f368135d54485d94d8cf657}{read16}} (uint16\+\_\+t addr)
\begin{DoxyCompactList}\small\item\em Read a double byte and handle the 6502\textquotesingle{}s little endian nature. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}{read\+PC}} ()
\begin{DoxyCompactList}\small\item\em Read byte at address in PC and then increment PC. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}{read\+PC16}} ()
\begin{DoxyCompactList}\small\item\em Read byte at address in PC, increment PC, and then repeat again for the double byte. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ac63aea4327d06c712e387355aa45634c}{write}} (uint16\+\_\+t addr, uint8\+\_\+t data)
\begin{DoxyCompactList}\small\item\em Write a byte at an address. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_af23243f6579040097fb658e65b118cc8}{fetch\+Operand}} ()
\begin{DoxyCompactList}\small\item\em Reads from the currently relevant absolute address. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_ac56bb2f19d81aa102131952138b834d2}{get\+Flag}} (FLAGS flag)
\begin{DoxyCompactList}\small\item\em returns the BIT value of a flag \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a1e8be351a6ef67497c7723af923ce311}{set\+Bits\+Of\+Byte}} (uint8\+\_\+t bits\+To\+Change, uint8\+\_\+t value, uint8\+\_\+t byte)
\begin{DoxyCompactList}\small\item\em sets bits of a byte based on a mask byte and a byte representing what to change them to. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a6167fd22e3883eb1343d4c874836d90b}{set\+Flags}} (uint8\+\_\+t flags, uint8\+\_\+t value)
\begin{DoxyCompactList}\small\item\em Sets flags to a specific value. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}{set\+Flags}} (uint8\+\_\+t flags)
\begin{DoxyCompactList}\small\item\em Set specific flags to 1. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a6d202cd149a1b2a54033968fe7737a9e}{do\+Address\+Mode}} (MODES)
\begin{DoxyCompactList}\small\item\em Execute code requiured for given address mode. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_af37181a3e671da1e5158a2e9484df7ce}{do\+Operation}} (OPS)
\begin{DoxyCompactList}\small\item\em Executes the given operation. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a87e4590eec62dfe7c11c1c13a8f17744}{do\+Instruction}} (\mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} \&)
\begin{DoxyCompactList}\small\item\em Execute a given instruction. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a9d143908c5d27dc5e0bbe73faed149d4}\label{classR6502_a9d143908c5d27dc5e0bbe73faed149d4}} 
void {\bfseries do\+Current\+Instruction} ()
\begin{DoxyCompactList}\small\item\em Execute the current instruction based on the current opcode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a96bd67071c7f130a60a69b9008f8cae5}{pull\+Stack}} ()
\begin{DoxyCompactList}\small\item\em Pull the stack. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_a41863794dd7b4df05c79ca459dae2704}{pull\+Stack16}} ()
\begin{DoxyCompactList}\small\item\em Pull a double byute from the stack (2 pulls). \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a5b3741ac52180036e740e62092b54fa3}{push\+Stack}} (uint8\+\_\+t byte)
\begin{DoxyCompactList}\small\item\em Push byte onto the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a479df391455a114c43bcfba60c5f84d4}{push\+Stack16}} (uint16\+\_\+t dbyte)
\begin{DoxyCompactList}\small\item\em Push double byte to the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}{do\+Cycle}} ()
\begin{DoxyCompactList}\small\item\em Executes when a cycle occurs. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ae65b642474bd73978e218965c58dc45d}{do\+Rel\+Branch}} ()
\begin{DoxyCompactList}\small\item\em Performs relative branching. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a1d04e292b825b6c39a048f2e4115a506}{prep\+Extra\+Cycle}} ()
\begin{DoxyCompactList}\small\item\em Preps an extra cycle if asked by address mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a81adecf5be1bf7b7c56c031d5079b8d7}\label{classR6502_a81adecf5be1bf7b7c56c031d5079b8d7}} 
void {\bfseries do\+Possible\+Extra\+Cycle} ()
\begin{DoxyCompactList}\small\item\em Performs extra clock cycle if agreed upon by the address mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ace68437a1162fdc3e01c85da9b56f513}\label{classR6502_ace68437a1162fdc3e01c85da9b56f513}} 
uint16\+\_\+t {\bfseries cycles\+Passed} ()
\item 
void \mbox{\hyperlink{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}{set\+PC}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the value in the PC directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_aa71bb58c57c3b9dc43d0ae45f7844d69}\label{classR6502_aa71bb58c57c3b9dc43d0ae45f7844d69}} 
void {\bfseries inc\+PC} ()
\begin{DoxyCompactList}\small\item\em Increment PC. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a08803023a9a08dbdd4cc42bd7f84d823}\label{classR6502_a08803023a9a08dbdd4cc42bd7f84d823}} 
void {\bfseries dec\+PC} ()
\begin{DoxyCompactList}\small\item\em Decrement the PC. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_accad1075998275c1628a742c9d339222}{set\+SP}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the stack pointer directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a6a37c46e49e1ed84447b999802d874c4}\label{classR6502_a6a37c46e49e1ed84447b999802d874c4}} 
void {\bfseries inc\+SP} ()
\begin{DoxyCompactList}\small\item\em Increment stack pointer. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ab8d064d80d5d611b1c19c849ff8bcd45}\label{classR6502_ab8d064d80d5d611b1c19c849ff8bcd45}} 
void {\bfseries dec\+SP} ()
\begin{DoxyCompactList}\small\item\em Decrement stack pointer. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a6c2db075d3eb24ee8228eef6da558cab}{setX}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the X index register value directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ab16b33ad7a39fe3640194bdebc115465}\label{classR6502_ab16b33ad7a39fe3640194bdebc115465}} 
void {\bfseries incX} ()
\begin{DoxyCompactList}\small\item\em Increment the X index register. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a7780f0ffc686cbadbe59cf33de295217}\label{classR6502_a7780f0ffc686cbadbe59cf33de295217}} 
void {\bfseries decX} ()
\begin{DoxyCompactList}\small\item\em Decrement the X index register. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}{setY}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the Y index register directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a63af9a115e47a7acdae0b57affddb5c7}\label{classR6502_a63af9a115e47a7acdae0b57affddb5c7}} 
void {\bfseries incY} ()
\begin{DoxyCompactList}\small\item\em Increment the Y index register. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a3c8068f2edd32fd388ad38a5e246242c}\label{classR6502_a3c8068f2edd32fd388ad38a5e246242c}} 
void {\bfseries decY} ()
\begin{DoxyCompactList}\small\item\em Decrement the Y index register. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}{set\+Accumulator}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the value of the accumulator. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_aca7646723dc26712851a13a5e8f94c46}{setP}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set processor status directly. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ab832f67a5d15cacb32a6b718e735db39}{on\+Register\+Update}} ()
\begin{DoxyCompactList}\small\item\em Called everytime a register updates. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a0234ea634f93c203b0d4df622c675a71}{mode\+Immediate}} ()
\begin{DoxyCompactList}\small\item\em Immediate addressing mode. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_aa697ba62d9912ff710f8116840101dc8}{mode\+Absolute}} ()
\begin{DoxyCompactList}\small\item\em Absolute addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a547154bcb1675afb4a49ab383b6c07eb}\label{classR6502_a547154bcb1675afb4a49ab383b6c07eb}} 
void {\bfseries mode\+AbsoluteX} ()
\begin{DoxyCompactList}\small\item\em Absolute X addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_af7611a264877c138652904790acde5aa}\label{classR6502_af7611a264877c138652904790acde5aa}} 
void {\bfseries mode\+AbsoluteY} ()
\begin{DoxyCompactList}\small\item\em Absolute Y addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ae16054a85b241d2055f202892d3e641a}\label{classR6502_ae16054a85b241d2055f202892d3e641a}} 
void {\bfseries mode\+Implied} ()
\begin{DoxyCompactList}\small\item\em Implied addressing mode. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_afb0e31aad2df919e7c6bca85b3b87cc7}{mode\+Accumulator}} ()
\begin{DoxyCompactList}\small\item\em Accumulator addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_af69b4c2e44b7bab78a21c7c5fe1dd004}\label{classR6502_af69b4c2e44b7bab78a21c7c5fe1dd004}} 
void {\bfseries mode\+Zero\+Page} ()
\begin{DoxyCompactList}\small\item\em Zero Page addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_af617d1ef7fde1b4bd29962fd8eb87e10}\label{classR6502_af617d1ef7fde1b4bd29962fd8eb87e10}} 
void {\bfseries mode\+Zero\+PageX} ()
\begin{DoxyCompactList}\small\item\em Zero Page (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a50ef7b5cb27d12930104bfa977b0e9c6}\label{classR6502_a50ef7b5cb27d12930104bfa977b0e9c6}} 
void {\bfseries mode\+Zero\+PageY} ()
\begin{DoxyCompactList}\small\item\em Zero Page (Y-\/indexed) addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a847b742fecd9cdf25fd2612c5d6c6ad2}\label{classR6502_a847b742fecd9cdf25fd2612c5d6c6ad2}} 
void {\bfseries mode\+Relative} ()
\begin{DoxyCompactList}\small\item\em Relative addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a7ee0be66e72b02a7da3d19792d5254f1}\label{classR6502_a7ee0be66e72b02a7da3d19792d5254f1}} 
void {\bfseries mode\+IndirectX} ()
\begin{DoxyCompactList}\small\item\em Indirect (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_af7554b121fe67f5e57620a23ae85b810}\label{classR6502_af7554b121fe67f5e57620a23ae85b810}} 
void {\bfseries mode\+IndirectY} ()
\begin{DoxyCompactList}\small\item\em Indirect (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a62fdc49984a4ac463b624ae7c7f282e2}{mode\+Indirect}} ()
\begin{DoxyCompactList}\small\item\em Indirect addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a135db8f892709ae470ac1257805a1a59}\label{classR6502_a135db8f892709ae470ac1257805a1a59}} 
void {\bfseries op\+ADC} ()
\item 
\mbox{\Hypertarget{classR6502_a015d5fb4e938567f29bc6a4d8f87b2e9}\label{classR6502_a015d5fb4e938567f29bc6a4d8f87b2e9}} 
void {\bfseries op\+AND} ()
\item 
\mbox{\Hypertarget{classR6502_ac22594eb79b9b8a0d8b02570b01f4aad}\label{classR6502_ac22594eb79b9b8a0d8b02570b01f4aad}} 
void {\bfseries op\+ASL} ()
\item 
\mbox{\Hypertarget{classR6502_adc3605ac2d1737836352b17f32eedf49}\label{classR6502_adc3605ac2d1737836352b17f32eedf49}} 
void {\bfseries op\+BCC} ()
\item 
\mbox{\Hypertarget{classR6502_a0680e9473050967bdb92fcfacbc2b563}\label{classR6502_a0680e9473050967bdb92fcfacbc2b563}} 
void {\bfseries op\+BCS} ()
\item 
\mbox{\Hypertarget{classR6502_a9ef39d76f8ff1e4397ffc57dd1d6fd42}\label{classR6502_a9ef39d76f8ff1e4397ffc57dd1d6fd42}} 
void {\bfseries op\+BEQ} ()
\item 
\mbox{\Hypertarget{classR6502_a75fb36f9e04a75f511aac1362363a6cc}\label{classR6502_a75fb36f9e04a75f511aac1362363a6cc}} 
void {\bfseries op\+BIT} ()
\item 
\mbox{\Hypertarget{classR6502_aeb116fdf908cdba85a80eae0114a452f}\label{classR6502_aeb116fdf908cdba85a80eae0114a452f}} 
void {\bfseries op\+BMI} ()
\item 
\mbox{\Hypertarget{classR6502_a64f031149679e416158a3415962814aa}\label{classR6502_a64f031149679e416158a3415962814aa}} 
void {\bfseries op\+BNE} ()
\item 
\mbox{\Hypertarget{classR6502_a65d74218c721e4534e96b8560b8f2921}\label{classR6502_a65d74218c721e4534e96b8560b8f2921}} 
void {\bfseries op\+BPL} ()
\item 
\mbox{\Hypertarget{classR6502_a1d55197ba2c3b38f25615d95b81bc993}\label{classR6502_a1d55197ba2c3b38f25615d95b81bc993}} 
void {\bfseries op\+BRK} ()
\item 
\mbox{\Hypertarget{classR6502_a94935fd290188e2c74e3473e4338bf04}\label{classR6502_a94935fd290188e2c74e3473e4338bf04}} 
void {\bfseries op\+BVC} ()
\item 
\mbox{\Hypertarget{classR6502_a99071f1d7d39314f2471f3f74dc778d0}\label{classR6502_a99071f1d7d39314f2471f3f74dc778d0}} 
void {\bfseries op\+BVS} ()
\item 
\mbox{\Hypertarget{classR6502_af0ca16bc594e9b6352ea7314e094d5e8}\label{classR6502_af0ca16bc594e9b6352ea7314e094d5e8}} 
void {\bfseries op\+CLC} ()
\item 
\mbox{\Hypertarget{classR6502_ab04aa4cbb28711138e5c1193e2975d88}\label{classR6502_ab04aa4cbb28711138e5c1193e2975d88}} 
void {\bfseries op\+CLD} ()
\item 
\mbox{\Hypertarget{classR6502_ab91910418af1f41435e4654ff23aa3fc}\label{classR6502_ab91910418af1f41435e4654ff23aa3fc}} 
void {\bfseries op\+CLI} ()
\item 
\mbox{\Hypertarget{classR6502_a4f8c416bbae7d6ee045c72d8898b960f}\label{classR6502_a4f8c416bbae7d6ee045c72d8898b960f}} 
void {\bfseries op\+CLV} ()
\item 
\mbox{\Hypertarget{classR6502_a5e69f83a7120adb6afb6b4b817df396e}\label{classR6502_a5e69f83a7120adb6afb6b4b817df396e}} 
void {\bfseries op\+CMP} ()
\item 
\mbox{\Hypertarget{classR6502_a46562e75b26d7eebea862f7189d13a8b}\label{classR6502_a46562e75b26d7eebea862f7189d13a8b}} 
void {\bfseries op\+CPX} ()
\item 
\mbox{\Hypertarget{classR6502_a5dbe5b6af89974f8b2e434d25c138c0f}\label{classR6502_a5dbe5b6af89974f8b2e434d25c138c0f}} 
void {\bfseries op\+CPY} ()
\item 
\mbox{\Hypertarget{classR6502_a076177c282d4b8084197734b4ddf9af9}\label{classR6502_a076177c282d4b8084197734b4ddf9af9}} 
void {\bfseries op\+DEC} ()
\item 
\mbox{\Hypertarget{classR6502_a7c0b3e9200b3148c6685e6a382555a28}\label{classR6502_a7c0b3e9200b3148c6685e6a382555a28}} 
void {\bfseries op\+DEX} ()
\item 
\mbox{\Hypertarget{classR6502_a60ff75d1abebc8bf6f05c930480fb719}\label{classR6502_a60ff75d1abebc8bf6f05c930480fb719}} 
void {\bfseries op\+DEY} ()
\item 
\mbox{\Hypertarget{classR6502_afafdec87238a8dc12de598ff43115d85}\label{classR6502_afafdec87238a8dc12de598ff43115d85}} 
void {\bfseries op\+EOR} ()
\item 
\mbox{\Hypertarget{classR6502_aa20f2169548278365bd22de46f542fb8}\label{classR6502_aa20f2169548278365bd22de46f542fb8}} 
void {\bfseries op\+INC} ()
\item 
\mbox{\Hypertarget{classR6502_adb0fb4ab5290df95468c159f0c0cf1ad}\label{classR6502_adb0fb4ab5290df95468c159f0c0cf1ad}} 
void {\bfseries op\+INX} ()
\item 
\mbox{\Hypertarget{classR6502_a7a251299371c724df55f1910d0fde8b4}\label{classR6502_a7a251299371c724df55f1910d0fde8b4}} 
void {\bfseries op\+INY} ()
\item 
\mbox{\Hypertarget{classR6502_a730cc2586321c2dbde0ca6cb41e7030c}\label{classR6502_a730cc2586321c2dbde0ca6cb41e7030c}} 
void {\bfseries op\+JMP} ()
\item 
\mbox{\Hypertarget{classR6502_ad81c751612e62347771fc7212b3a7136}\label{classR6502_ad81c751612e62347771fc7212b3a7136}} 
void {\bfseries op\+JSR} ()
\item 
\mbox{\Hypertarget{classR6502_aa3f09770fa589c7b643034cef606c0db}\label{classR6502_aa3f09770fa589c7b643034cef606c0db}} 
void {\bfseries op\+LDA} ()
\item 
\mbox{\Hypertarget{classR6502_af0d1a464bb5a6de150d85684239c71bb}\label{classR6502_af0d1a464bb5a6de150d85684239c71bb}} 
void {\bfseries op\+LDX} ()
\item 
\mbox{\Hypertarget{classR6502_a5897b1ab942a692a18e54f3fedd2bd8d}\label{classR6502_a5897b1ab942a692a18e54f3fedd2bd8d}} 
void {\bfseries op\+LDY} ()
\item 
\mbox{\Hypertarget{classR6502_a46a3e2538e8788d8473cc0e36430c7f4}\label{classR6502_a46a3e2538e8788d8473cc0e36430c7f4}} 
void {\bfseries op\+LSR} ()
\item 
\mbox{\Hypertarget{classR6502_a811d0ebce4815bb25666fe942471a8b1}\label{classR6502_a811d0ebce4815bb25666fe942471a8b1}} 
void {\bfseries op\+NOP} ()
\item 
\mbox{\Hypertarget{classR6502_a3c0fb7cb07f7cc3f46b5fa788f25506c}\label{classR6502_a3c0fb7cb07f7cc3f46b5fa788f25506c}} 
void {\bfseries op\+ORA} ()
\item 
\mbox{\Hypertarget{classR6502_a3b06ef7e0b41b2ce7de3d8718a318143}\label{classR6502_a3b06ef7e0b41b2ce7de3d8718a318143}} 
void {\bfseries op\+PHA} ()
\item 
\mbox{\Hypertarget{classR6502_a2ab21024481915259cf6c168d7b87e8b}\label{classR6502_a2ab21024481915259cf6c168d7b87e8b}} 
void {\bfseries op\+PHP} ()
\item 
\mbox{\Hypertarget{classR6502_ac2d68f27da2d3a6f3720122bc65a8c27}\label{classR6502_ac2d68f27da2d3a6f3720122bc65a8c27}} 
void {\bfseries op\+PLA} ()
\item 
\mbox{\Hypertarget{classR6502_a3cf8ee350b772d3dbc9fe6acfa825e67}\label{classR6502_a3cf8ee350b772d3dbc9fe6acfa825e67}} 
void {\bfseries op\+PLP} ()
\item 
\mbox{\Hypertarget{classR6502_aff3fcf02c68ac81a84efcd3ebf0d52a2}\label{classR6502_aff3fcf02c68ac81a84efcd3ebf0d52a2}} 
void {\bfseries op\+ROL} ()
\item 
\mbox{\Hypertarget{classR6502_a29e9135ceae57b58355d9740b2a54736}\label{classR6502_a29e9135ceae57b58355d9740b2a54736}} 
void {\bfseries op\+ROR} ()
\item 
\mbox{\Hypertarget{classR6502_a71b3ae1782f5b347d2fd47e581290e63}\label{classR6502_a71b3ae1782f5b347d2fd47e581290e63}} 
void {\bfseries op\+RTI} ()
\item 
\mbox{\Hypertarget{classR6502_ae789d704c60ca9ab78c14df4a2047916}\label{classR6502_ae789d704c60ca9ab78c14df4a2047916}} 
void {\bfseries op\+RTS} ()
\item 
\mbox{\Hypertarget{classR6502_a93a79f72cee4082ea537886f80ff5db1}\label{classR6502_a93a79f72cee4082ea537886f80ff5db1}} 
void {\bfseries op\+SBC} ()
\item 
\mbox{\Hypertarget{classR6502_aa3b5f0f02e7e369cfa44614467f76146}\label{classR6502_aa3b5f0f02e7e369cfa44614467f76146}} 
void {\bfseries op\+SEC} ()
\item 
\mbox{\Hypertarget{classR6502_a715571e0876e7a50ded3eab5d7d7b538}\label{classR6502_a715571e0876e7a50ded3eab5d7d7b538}} 
void {\bfseries op\+SED} ()
\item 
\mbox{\Hypertarget{classR6502_a5d714b29b1138957a24bb7452d5e30c7}\label{classR6502_a5d714b29b1138957a24bb7452d5e30c7}} 
void {\bfseries op\+SEI} ()
\item 
\mbox{\Hypertarget{classR6502_a0d4de0ba6e8b159eb5215a0bdb82ab29}\label{classR6502_a0d4de0ba6e8b159eb5215a0bdb82ab29}} 
void {\bfseries op\+STA} ()
\item 
\mbox{\Hypertarget{classR6502_a1e56e20c2a5dca30ef625c0b014da7c4}\label{classR6502_a1e56e20c2a5dca30ef625c0b014da7c4}} 
void {\bfseries op\+STX} ()
\item 
\mbox{\Hypertarget{classR6502_afbdfe111ee192ac28fda80562326449c}\label{classR6502_afbdfe111ee192ac28fda80562326449c}} 
void {\bfseries op\+STY} ()
\item 
\mbox{\Hypertarget{classR6502_aba0b108cdc67c37c609a677bf8d3e265}\label{classR6502_aba0b108cdc67c37c609a677bf8d3e265}} 
void {\bfseries op\+TAX} ()
\item 
\mbox{\Hypertarget{classR6502_abab74334ebdbeefd6c912cd402ff6c09}\label{classR6502_abab74334ebdbeefd6c912cd402ff6c09}} 
void {\bfseries op\+TAY} ()
\item 
\mbox{\Hypertarget{classR6502_a501e6163703165194d4d90523e63cdc0}\label{classR6502_a501e6163703165194d4d90523e63cdc0}} 
void {\bfseries op\+TSX} ()
\item 
\mbox{\Hypertarget{classR6502_a3ceac6be99c043b027d6718c48684cfb}\label{classR6502_a3ceac6be99c043b027d6718c48684cfb}} 
void {\bfseries op\+TXA} ()
\item 
\mbox{\Hypertarget{classR6502_a4ab7c12fde7504b180645ff3b0d58f1a}\label{classR6502_a4ab7c12fde7504b180645ff3b0d58f1a}} 
void {\bfseries op\+TXS} ()
\item 
\mbox{\Hypertarget{classR6502_aae6662bb57e7c374fa86809e773bba7d}\label{classR6502_aae6662bb57e7c374fa86809e773bba7d}} 
void {\bfseries op\+TYA} ()
\item 
\mbox{\Hypertarget{classR6502_a93248662abf248f9660f6375c4595ffc}\label{classR6502_a93248662abf248f9660f6375c4595ffc}} 
void {\bfseries mode\+Illegal} ()
\begin{DoxyCompactList}\small\item\em Executes when an illegal address mode is executed. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_aa479b48ea12de8ca049daa98f3b49200}\label{classR6502_aa479b48ea12de8ca049daa98f3b49200}} 
void {\bfseries op\+Illegal} ()
\begin{DoxyCompactList}\small\item\em Executes when an illegal operation is executed. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Static Private Member Functions}
\begin{DoxyCompactItemize}
\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a1330df49e1dac7c1214471e46b72b799}{is\+Zero}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is byte a zero? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_ab77ef3817101db242431880fbdc297e8}{is\+Zero}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte a zero? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a423ffaca5454cc8d76aa257b941815c8}{is\+Negative}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is byte negative? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}{is\+Negative}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte negative? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}{is\+Carry}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte indicative of a carry occuring? \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Private Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_a1d9b89836cd21242ee126b3ebbaad434}\label{classR6502_a1d9b89836cd21242ee126b3ebbaad434}} 
\mbox{\hyperlink{classMemory}{Memory}} {\bfseries memory}
\item 
\mbox{\Hypertarget{classR6502_a395e1c94a04aad0c34f5d6f58f1a8508}\label{classR6502_a395e1c94a04aad0c34f5d6f58f1a8508}} 
uint8\+\_\+t {\bfseries opcode} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a43c0b2b78cc2f861b3f59e3567a1ac7a}\label{classR6502_a43c0b2b78cc2f861b3f59e3567a1ac7a}} 
uint16\+\_\+t {\bfseries abs\+Addr} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_a2e0798671bfd17a2d5bee714c3343163}\label{classR6502_a2e0798671bfd17a2d5bee714c3343163}} 
uint16\+\_\+t {\bfseries rel\+Addr} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_abc99398c35222144d6ead68c1f7dc15a}\label{classR6502_abc99398c35222144d6ead68c1f7dc15a}} 
uint8\+\_\+t {\bfseries operand} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a3c0948012c9174297c39858ad67ef14d}\label{classR6502_a3c0948012c9174297c39858ad67ef14d}} 
uint16\+\_\+t {\bfseries tmp} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_a30ad21204254a3ca2241f8fd87469735}\label{classR6502_a30ad21204254a3ca2241f8fd87469735}} 
uint16\+\_\+t {\bfseries cycles} = 0
\item 
\mbox{\Hypertarget{classR6502_ae7d8f78f1a6d1e8c5dc816ef7df4a228}\label{classR6502_ae7d8f78f1a6d1e8c5dc816ef7df4a228}} 
uint64\+\_\+t {\bfseries total\+Cycles\+Passed} = 0
\item 
\mbox{\Hypertarget{classR6502_a54ce54bb931b31fe65ab934a13e9f2d8}\label{classR6502_a54ce54bb931b31fe65ab934a13e9f2d8}} 
uint8\+\_\+t {\bfseries accumulator} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a12a0443acf092644bb16c91c55cae7c5}\label{classR6502_a12a0443acf092644bb16c91c55cae7c5}} 
uint8\+\_\+t {\bfseries x} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a3f2eb0d383644ab3bc9772128fc8d775}\label{classR6502_a3f2eb0d383644ab3bc9772128fc8d775}} 
uint8\+\_\+t {\bfseries y} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a5a44f178f99dcb6053b3723f3c095289}\label{classR6502_a5a44f178f99dcb6053b3723f3c095289}} 
uint16\+\_\+t {\bfseries pc} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_abf1451cc626003b6ec5d6099e257a2dc}\label{classR6502_abf1451cc626003b6ec5d6099e257a2dc}} 
uint8\+\_\+t {\bfseries sp} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a58b552e6f87135a80613b352e48f5282}\label{classR6502_a58b552e6f87135a80613b352e48f5282}} 
uint8\+\_\+t {\bfseries P} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a8322c8949aef21333d5cd8d709ba2379}\label{classR6502_a8322c8949aef21333d5cd8d709ba2379}} 
const \mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} {\bfseries NULL\+\_\+\+INSTRUCTION} = \{NULLMODE, NULLOP, 0\}
\item 
\mbox{\Hypertarget{classR6502_a2a47e3114022c38dbee8203969333534}\label{classR6502_a2a47e3114022c38dbee8203969333534}} 
std\+::vector$<$ \mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} $>$ {\bfseries instruction\+Matrix}
\item 
\mbox{\Hypertarget{classR6502_add57c12542d4c3bf5517aea7fca44e84}\label{classR6502_add57c12542d4c3bf5517aea7fca44e84}} 
\mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} {\bfseries current\+Instruction} = NULL\+\_\+\+INSTRUCTION
\item 
\mbox{\Hypertarget{classR6502_a4d0d5d8534818789c659c74e25b7aebf}\label{classR6502_a4d0d5d8534818789c659c74e25b7aebf}} 
uint8\+\_\+t {\bfseries extra\+Cycle\+Prepped} = 0x00
\end{DoxyCompactItemize}


\doxysubsection{Member Function Documentation}
\mbox{\Hypertarget{classR6502_a6d202cd149a1b2a54033968fe7737a9e}\label{classR6502_a6d202cd149a1b2a54033968fe7737a9e}} 
\index{R6502@{R6502}!doAddressMode@{doAddressMode}}
\index{doAddressMode@{doAddressMode}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doAddressMode()}{doAddressMode()}}
{\footnotesize\ttfamily void R6502\+::do\+Address\+Mode (\begin{DoxyParamCaption}\item[{MODES}]{mode }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Execute code requiured for given address mode. 


\begin{DoxyParams}{Parameters}
{\em mode} & -\/ The mode. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}\label{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}} 
\index{R6502@{R6502}!doCycle@{doCycle}}
\index{doCycle@{doCycle}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doCycle()}{doCycle()}}
{\footnotesize\ttfamily void R6502\+::do\+Cycle (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Executes when a cycle occurs. 

Good for capturing clock cycles. \mbox{\Hypertarget{classR6502_a87e4590eec62dfe7c11c1c13a8f17744}\label{classR6502_a87e4590eec62dfe7c11c1c13a8f17744}} 
\index{R6502@{R6502}!doInstruction@{doInstruction}}
\index{doInstruction@{doInstruction}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doInstruction()}{doInstruction()}}
{\footnotesize\ttfamily void R6502\+::do\+Instruction (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} \&}]{instruction }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Execute a given instruction. 


\begin{DoxyParams}{Parameters}
{\em instruction} & -\/ The instruction \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_af37181a3e671da1e5158a2e9484df7ce}\label{classR6502_af37181a3e671da1e5158a2e9484df7ce}} 
\index{R6502@{R6502}!doOperation@{doOperation}}
\index{doOperation@{doOperation}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doOperation()}{doOperation()}}
{\footnotesize\ttfamily void R6502\+::do\+Operation (\begin{DoxyParamCaption}\item[{OPS}]{op }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Executes the given operation. 


\begin{DoxyParams}{Parameters}
{\em op} & -\/ The operation. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_ae65b642474bd73978e218965c58dc45d}\label{classR6502_ae65b642474bd73978e218965c58dc45d}} 
\index{R6502@{R6502}!doRelBranch@{doRelBranch}}
\index{doRelBranch@{doRelBranch}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doRelBranch()}{doRelBranch()}}
{\footnotesize\ttfamily void R6502\+::do\+Rel\+Branch (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Performs relative branching. 

Very frequent operation in instructions... Useful method for cutting down on bugs / repetition. \mbox{\Hypertarget{classR6502_af23243f6579040097fb658e65b118cc8}\label{classR6502_af23243f6579040097fb658e65b118cc8}} 
\index{R6502@{R6502}!fetchOperand@{fetchOperand}}
\index{fetchOperand@{fetchOperand}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{fetchOperand()}{fetchOperand()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::fetch\+Operand (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Reads from the currently relevant absolute address. 

This is almost always the operand of an instruction)

\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ The operand in most cases. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ac56bb2f19d81aa102131952138b834d2}\label{classR6502_ac56bb2f19d81aa102131952138b834d2}} 
\index{R6502@{R6502}!getFlag@{getFlag}}
\index{getFlag@{getFlag}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{getFlag()}{getFlag()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::get\+Flag (\begin{DoxyParamCaption}\item[{FLAGS}]{flag }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



returns the BIT value of a flag 


\begin{DoxyParams}{Parameters}
{\em flag} & The flag of the bit you want. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t 1 or 0. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}\label{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}} 
\index{R6502@{R6502}!IRQ@{IRQ}}
\index{IRQ@{IRQ}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IRQ()}{IRQ()}}
{\footnotesize\ttfamily void R6502\+::\+IRQ (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



IRQ interrupt sequence command. 

\href{http://archive.6502.org/datasheets/synertek_programming_manual.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/synertek\+\_\+programming\+\_\+manual.\+pdf}} -\/ p. 131 \href{https://www.nesdev.org/wiki/CPU_interrupts}{\texttt{ https\+://www.\+nesdev.\+org/wiki/\+CPU\+\_\+interrupts}} \mbox{\Hypertarget{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}\label{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}} 
\index{R6502@{R6502}!isCarry@{isCarry}}
\index{isCarry@{isCarry}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isCarry()}{isCarry()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Carry (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte indicative of a carry occuring? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Carry flag (true) if a carry occured and zero (false) if no carry occured. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}\label{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}} 
\index{R6502@{R6502}!isNegative@{isNegative}}
\index{isNegative@{isNegative}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isNegative()}{isNegative()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Negative (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte negative? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Negative flag (true) if negative and zero (false) if not negative. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a423ffaca5454cc8d76aa257b941815c8}\label{classR6502_a423ffaca5454cc8d76aa257b941815c8}} 
\index{R6502@{R6502}!isNegative@{isNegative}}
\index{isNegative@{isNegative}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isNegative()}{isNegative()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Negative (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is byte negative? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Negative flag (true) if negative and zero (false) if not negative. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ab77ef3817101db242431880fbdc297e8}\label{classR6502_ab77ef3817101db242431880fbdc297e8}} 
\index{R6502@{R6502}!isZero@{isZero}}
\index{isZero@{isZero}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isZero()}{isZero()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Zero (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte a zero? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Zero flag (true) if zero and zero (false) if not zero. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a1330df49e1dac7c1214471e46b72b799}\label{classR6502_a1330df49e1dac7c1214471e46b72b799}} 
\index{R6502@{R6502}!isZero@{isZero}}
\index{isZero@{isZero}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isZero()}{isZero()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Zero (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is byte a zero? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Zero flag (true) if zero and zero (false) if not zero. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_aa697ba62d9912ff710f8116840101dc8}\label{classR6502_aa697ba62d9912ff710f8116840101dc8}} 
\index{R6502@{R6502}!modeAbsolute@{modeAbsolute}}
\index{modeAbsolute@{modeAbsolute}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{modeAbsolute()}{modeAbsolute()}}
{\footnotesize\ttfamily void R6502\+::mode\+Absolute (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Absolute addressing mode. 

Second byte has low order byte of effective address, third has higher order byte (reminder again\+: 6502 is little endian!!!) That means ABS instructions can acess all 64KB of address space. 2$^\wedge$8 = 0x100 2 byte addressing... 0x100 $\ast$ 0x100 = 0x10000 (64KB) \mbox{\Hypertarget{classR6502_afb0e31aad2df919e7c6bca85b3b87cc7}\label{classR6502_afb0e31aad2df919e7c6bca85b3b87cc7}} 
\index{R6502@{R6502}!modeAccumulator@{modeAccumulator}}
\index{modeAccumulator@{modeAccumulator}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{modeAccumulator()}{modeAccumulator()}}
{\footnotesize\ttfamily void R6502\+::mode\+Accumulator (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Accumulator addressing mode. 

It\textquotesingle{}s just IMP... \mbox{\Hypertarget{classR6502_a0234ea634f93c203b0d4df622c675a71}\label{classR6502_a0234ea634f93c203b0d4df622c675a71}} 
\index{R6502@{R6502}!modeImmediate@{modeImmediate}}
\index{modeImmediate@{modeImmediate}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{modeImmediate()}{modeImmediate()}}
{\footnotesize\ttfamily void R6502\+::mode\+Immediate (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Immediate addressing mode. 

Next byte has operand. get current pc, then increment. \mbox{\Hypertarget{classR6502_a62fdc49984a4ac463b624ae7c7f282e2}\label{classR6502_a62fdc49984a4ac463b624ae7c7f282e2}} 
\index{R6502@{R6502}!modeIndirect@{modeIndirect}}
\index{modeIndirect@{modeIndirect}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{modeIndirect()}{modeIndirect()}}
{\footnotesize\ttfamily void R6502\+::mode\+Indirect (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Indirect addressing mode. 

Intentionally bugged because that\textquotesingle{}s the way it is on the 6502 itself. hnesdev.\+icequake.\+net/6502bugs.txt\+: \mbox{\Hypertarget{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}\label{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}} 
\index{R6502@{R6502}!NMI@{NMI}}
\index{NMI@{NMI}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{NMI()}{NMI()}}
{\footnotesize\ttfamily void R6502\+::\+NMI (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



NMI interrupt sequence command. 

\href{http://archive.6502.org/datasheets/synertek_programming_manual.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/synertek\+\_\+programming\+\_\+manual.\+pdf}} -\/ p. 131 \href{https://www.nesdev.org/wiki/CPU_interrupts}{\texttt{ https\+://www.\+nesdev.\+org/wiki/\+CPU\+\_\+interrupts}} \mbox{\Hypertarget{classR6502_ab832f67a5d15cacb32a6b718e735db39}\label{classR6502_ab832f67a5d15cacb32a6b718e735db39}} 
\index{R6502@{R6502}!onRegisterUpdate@{onRegisterUpdate}}
\index{onRegisterUpdate@{onRegisterUpdate}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{onRegisterUpdate()}{onRegisterUpdate()}}
{\footnotesize\ttfamily void R6502\+::on\+Register\+Update (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Called everytime a register updates. 

Useful for logging. \mbox{\Hypertarget{classR6502_a1d04e292b825b6c39a048f2e4115a506}\label{classR6502_a1d04e292b825b6c39a048f2e4115a506}} 
\index{R6502@{R6502}!prepExtraCycle@{prepExtraCycle}}
\index{prepExtraCycle@{prepExtraCycle}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{prepExtraCycle()}{prepExtraCycle()}}
{\footnotesize\ttfamily void R6502\+::prep\+Extra\+Cycle (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Preps an extra cycle if asked by address mode. 

Extra cycle will execute if instruction agrees on extra cycle. \mbox{\Hypertarget{classR6502_a96bd67071c7f130a60a69b9008f8cae5}\label{classR6502_a96bd67071c7f130a60a69b9008f8cae5}} 
\index{R6502@{R6502}!pullStack@{pullStack}}
\index{pullStack@{pullStack}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pullStack()}{pullStack()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::pull\+Stack (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Pull the stack. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Top value on stack. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a41863794dd7b4df05c79ca459dae2704}\label{classR6502_a41863794dd7b4df05c79ca459dae2704}} 
\index{R6502@{R6502}!pullStack16@{pullStack16}}
\index{pullStack16@{pullStack16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pullStack16()}{pullStack16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::pull\+Stack16 (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Pull a double byute from the stack (2 pulls). 

\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte on the stack. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a5b3741ac52180036e740e62092b54fa3}\label{classR6502_a5b3741ac52180036e740e62092b54fa3}} 
\index{R6502@{R6502}!pushStack@{pushStack}}
\index{pushStack@{pushStack}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pushStack()}{pushStack()}}
{\footnotesize\ttfamily void R6502\+::push\+Stack (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Push byte onto the stack. 


\begin{DoxyParams}{Parameters}
{\em byte} & The value to push to the stack. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a479df391455a114c43bcfba60c5f84d4}\label{classR6502_a479df391455a114c43bcfba60c5f84d4}} 
\index{R6502@{R6502}!pushStack16@{pushStack16}}
\index{pushStack16@{pushStack16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pushStack16()}{pushStack16()}}
{\footnotesize\ttfamily void R6502\+::push\+Stack16 (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{dbyte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Push double byte to the stack. 


\begin{DoxyParams}{Parameters}
{\em dbyte} & The double byte to push to the stack. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}\label{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}} 
\index{R6502@{R6502}!read@{read}}
\index{read@{read}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{read()}{read()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::read (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address. 


\begin{DoxyParams}{Parameters}
{\em addr} & Address of data \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t The data 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a4e1cd10e7f368135d54485d94d8cf657}\label{classR6502_a4e1cd10e7f368135d54485d94d8cf657}} 
\index{R6502@{R6502}!read16@{read16}}
\index{read16@{read16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{read16()}{read16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::read16 (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read a double byte and handle the 6502\textquotesingle{}s little endian nature. 


\begin{DoxyParams}{Parameters}
{\em addr} & Initial address of double byte. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}\label{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}} 
\index{R6502@{R6502}!readPC@{readPC}}
\index{readPC@{readPC}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{readPC()}{readPC()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::read\+PC (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address in PC and then increment PC. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t The data 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}\label{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}} 
\index{R6502@{R6502}!readPC16@{readPC16}}
\index{readPC16@{readPC16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{readPC16()}{readPC16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::read\+PC16 (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address in PC, increment PC, and then repeat again for the double byte. 

\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a2737d72976d543cd11d6d23531844b48}\label{classR6502_a2737d72976d543cd11d6d23531844b48}} 
\index{R6502@{R6502}!RES@{RES}}
\index{RES@{RES}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{RES()}{RES()}}
{\footnotesize\ttfamily void R6502\+::\+RES (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Reset command. 

\href{https://wiki.nesdev.org/w/index.php?title=CPU_power_up_state}{\texttt{ https\+://wiki.\+nesdev.\+org/w/index.\+php?title=\+CPU\+\_\+power\+\_\+up\+\_\+state}} (Page 2 under RESET (RES)) \href{http://archive.6502.org/datasheets/rockwell_r650x_r651x.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/rockwell\+\_\+r650x\+\_\+r651x.\+pdf}} \mbox{\Hypertarget{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}\label{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}} 
\index{R6502@{R6502}!setAccumulator@{setAccumulator}}
\index{setAccumulator@{setAccumulator}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setAccumulator()}{setAccumulator()}}
{\footnotesize\ttfamily void R6502\+::set\+Accumulator (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the value of the accumulator. 


\begin{DoxyParams}{Parameters}
{\em byte} & New accumulator value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a1e8be351a6ef67497c7723af923ce311}\label{classR6502_a1e8be351a6ef67497c7723af923ce311}} 
\index{R6502@{R6502}!setBitsOfByte@{setBitsOfByte}}
\index{setBitsOfByte@{setBitsOfByte}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setBitsOfByte()}{setBitsOfByte()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::set\+Bits\+Of\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{bits\+To\+Change,  }\item[{uint8\+\_\+t}]{value,  }\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



sets bits of a byte based on a mask byte and a byte representing what to change them to. 


\begin{DoxyParams}{Parameters}
{\em bits\+To\+Change} & The byte mask. \\
\hline
{\em value} & The values to set the bits specified by the mask to. \\
\hline
{\em byte} & The original byte to modify. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}\label{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}} 
\index{R6502@{R6502}!setFlags@{setFlags}}
\index{setFlags@{setFlags}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setFlags()}{setFlags()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily void R6502\+::set\+Flags (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{flags }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set specific flags to 1. 


\begin{DoxyParams}{Parameters}
{\em flags} & The flags to set. e.\+g. Z $\vert$ N $\vert$ C to set the Z, N, and C flags to one. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a6167fd22e3883eb1343d4c874836d90b}\label{classR6502_a6167fd22e3883eb1343d4c874836d90b}} 
\index{R6502@{R6502}!setFlags@{setFlags}}
\index{setFlags@{setFlags}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setFlags()}{setFlags()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily void R6502\+::set\+Flags (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{flags,  }\item[{uint8\+\_\+t}]{value }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Sets flags to a specific value. 


\begin{DoxyParams}{Parameters}
{\em flags} & The flags to set. e.\+g. Z $\vert$ N $\vert$ C to set the Z, N, and C flags. \\
\hline
{\em value} & The value to set them to. i.\+e. 1 or 0 \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_aca7646723dc26712851a13a5e8f94c46}\label{classR6502_aca7646723dc26712851a13a5e8f94c46}} 
\index{R6502@{R6502}!setP@{setP}}
\index{setP@{setP}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setP()}{setP()}}
{\footnotesize\ttfamily void R6502\+::setP (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set processor status directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New processor status. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}\label{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}} 
\index{R6502@{R6502}!setPC@{setPC}}
\index{setPC@{setPC}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setPC()}{setPC()}}
{\footnotesize\ttfamily void R6502\+::set\+PC (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the value in the PC directly. 


\begin{DoxyParams}{Parameters}
{\em addr} & The address to store in the PC. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_accad1075998275c1628a742c9d339222}\label{classR6502_accad1075998275c1628a742c9d339222}} 
\index{R6502@{R6502}!setSP@{setSP}}
\index{setSP@{setSP}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setSP()}{setSP()}}
{\footnotesize\ttfamily void R6502\+::set\+SP (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the stack pointer directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New pointer value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a6c2db075d3eb24ee8228eef6da558cab}\label{classR6502_a6c2db075d3eb24ee8228eef6da558cab}} 
\index{R6502@{R6502}!setX@{setX}}
\index{setX@{setX}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setX()}{setX()}}
{\footnotesize\ttfamily void R6502\+::setX (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the X index register value directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New X index value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}\label{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}} 
\index{R6502@{R6502}!setY@{setY}}
\index{setY@{setY}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setY()}{setY()}}
{\footnotesize\ttfamily void R6502\+::setY (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the Y index register directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New Y index value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_ac63aea4327d06c712e387355aa45634c}\label{classR6502_ac63aea4327d06c712e387355aa45634c}} 
\index{R6502@{R6502}!write@{write}}
\index{write@{write}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{write()}{write()}}
{\footnotesize\ttfamily void R6502\+::write (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr,  }\item[{uint8\+\_\+t}]{data }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Write a byte at an address. 


\begin{DoxyParams}{Parameters}
{\em addr} & The address to write to. \\
\hline
{\em data} & The data to write. \\
\hline
\end{DoxyParams}


The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
src/R6502.\+h\item 
src/R6502.\+cpp\end{DoxyCompactItemize}
