\hypertarget{classR6502}{}\doxysection{R6502 Class Reference}
\label{classR6502}\index{R6502@{R6502}}


Collaboration diagram for R6502\+:
% FIG 0
\doxysubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}}
\end{DoxyCompactItemize}
\doxysubsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_ac2c953dfe859abf412b739cba0ff8a8c}\label{classR6502_ac2c953dfe859abf412b739cba0ff8a8c}} 
void {\bfseries init} ()
\begin{DoxyCompactList}\small\item\em Init CPU for emulation. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a901623838e58b817967948dbeba88c59}\label{classR6502_a901623838e58b817967948dbeba88c59}} 
void {\bfseries clock} ()
\begin{DoxyCompactList}\small\item\em Start CPU clock. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a2737d72976d543cd11d6d23531844b48}{RES}} ()
\begin{DoxyCompactList}\small\item\em Reset command. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}{IRQ}} ()
\begin{DoxyCompactList}\small\item\em IRQ interrupt sequence command. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}{NMI}} ()
\begin{DoxyCompactList}\small\item\em NMI interrupt sequence command. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a82e3c80b625a84f3d1fe63885c35a204}{connect\+Bus}} (\mbox{\hyperlink{classBus}{Bus}} $\ast$bus)
\begin{DoxyCompactList}\small\item\em Sets the CPU\textquotesingle{}s bus. That\textquotesingle{}s all. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Private Types}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_aa6313af3b3517f51a31a049c2fd36cc0}\label{classR6502_aa6313af3b3517f51a31a049c2fd36cc0}} 
enum {\bfseries FLAGS} \{ \newline
{\bfseries N} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 7
, {\bfseries V} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 6
, {\bfseries U} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 5
, {\bfseries B} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 4
, \newline
{\bfseries D} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 3
, {\bfseries I} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 2
, {\bfseries Z} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 1
, {\bfseries C} = 0x01 \texorpdfstring{$<$}{<}\texorpdfstring{$<$}{<} 0
 \}
\end{DoxyCompactItemize}
\doxysubsection*{Private Member Functions}
\begin{DoxyCompactItemize}
\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}{read}} (uint16\+\_\+t addr)
\begin{DoxyCompactList}\small\item\em Read byte at address. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_a4e1cd10e7f368135d54485d94d8cf657}{read16}} (uint16\+\_\+t addr)
\begin{DoxyCompactList}\small\item\em Read a double byte and handle the 6502\textquotesingle{}s little endian nature. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}{read\+PC}} ()
\begin{DoxyCompactList}\small\item\em Read byte at address in PC and then increment PC. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}{read\+PC16}} ()
\begin{DoxyCompactList}\small\item\em Read byte at address in PC, increment PC, and then repeat again for the double byte. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ac63aea4327d06c712e387355aa45634c}{write}} (uint16\+\_\+t addr, uint8\+\_\+t data)
\begin{DoxyCompactList}\small\item\em Write a byte at an address. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_af23243f6579040097fb658e65b118cc8}{fetch\+Operand}} ()
\begin{DoxyCompactList}\small\item\em Reads from the currently relevant absolute address. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_ac56bb2f19d81aa102131952138b834d2}{get\+Flag}} (FLAGS flag)
\begin{DoxyCompactList}\small\item\em returns the BIT value of a flag \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a1e8be351a6ef67497c7723af923ce311}{set\+Bits\+Of\+Byte}} (uint8\+\_\+t bits\+To\+Change, uint8\+\_\+t value, uint8\+\_\+t byte)
\begin{DoxyCompactList}\small\item\em sets bits of a byte based on a mask byte and a byte representing what to change them to. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a6167fd22e3883eb1343d4c874836d90b}{set\+Flags}} (uint8\+\_\+t flags, uint8\+\_\+t value)
\begin{DoxyCompactList}\small\item\em Sets flags to a specific value. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}{set\+Flags}} (uint8\+\_\+t flags)
\begin{DoxyCompactList}\small\item\em Set specific flags to 1. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a02c8cddf9e231e3f98af20b85a4e9bf9}\label{classR6502_a02c8cddf9e231e3f98af20b85a4e9bf9}} 
void {\bfseries set\+Flag} (FLAGS flag, uint8\+\_\+t value)
\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a96bd67071c7f130a60a69b9008f8cae5}{pull\+Stack}} ()
\begin{DoxyCompactList}\small\item\em Pull the stack. \end{DoxyCompactList}\item 
uint16\+\_\+t \mbox{\hyperlink{classR6502_a41863794dd7b4df05c79ca459dae2704}{pull\+Stack16}} ()
\begin{DoxyCompactList}\small\item\em Pull a double byute from the stack (2 pulls). \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a5b3741ac52180036e740e62092b54fa3}{push\+Stack}} (uint8\+\_\+t byte)
\begin{DoxyCompactList}\small\item\em Push byte onto the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a479df391455a114c43bcfba60c5f84d4}{push\+Stack16}} (uint16\+\_\+t dbyte)
\begin{DoxyCompactList}\small\item\em Push double byte to the stack. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}{do\+Cycle}} ()
\begin{DoxyCompactList}\small\item\em Executes when a cycle occurs. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ae65b642474bd73978e218965c58dc45d}{do\+Rel\+Branch}} ()
\begin{DoxyCompactList}\small\item\em Performs relative branching. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ace68437a1162fdc3e01c85da9b56f513}\label{classR6502_ace68437a1162fdc3e01c85da9b56f513}} 
uint16\+\_\+t {\bfseries cycles\+Passed} ()
\item 
void \mbox{\hyperlink{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}{set\+PC}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the value in the PC directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_aa71bb58c57c3b9dc43d0ae45f7844d69}\label{classR6502_aa71bb58c57c3b9dc43d0ae45f7844d69}} 
void {\bfseries inc\+PC} ()
\begin{DoxyCompactList}\small\item\em Increment PC. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a08803023a9a08dbdd4cc42bd7f84d823}\label{classR6502_a08803023a9a08dbdd4cc42bd7f84d823}} 
void {\bfseries dec\+PC} ()
\begin{DoxyCompactList}\small\item\em Decrement the PC. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_accad1075998275c1628a742c9d339222}{set\+SP}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the stack pointer directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a6a37c46e49e1ed84447b999802d874c4}\label{classR6502_a6a37c46e49e1ed84447b999802d874c4}} 
void {\bfseries inc\+SP} ()
\begin{DoxyCompactList}\small\item\em Increment stack pointer. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ab8d064d80d5d611b1c19c849ff8bcd45}\label{classR6502_ab8d064d80d5d611b1c19c849ff8bcd45}} 
void {\bfseries dec\+SP} ()
\begin{DoxyCompactList}\small\item\em Decrement stack pointer. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a6c2db075d3eb24ee8228eef6da558cab}{setX}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the X index register value directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_ab16b33ad7a39fe3640194bdebc115465}\label{classR6502_ab16b33ad7a39fe3640194bdebc115465}} 
void {\bfseries incX} ()
\begin{DoxyCompactList}\small\item\em Increment the X index register. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a7780f0ffc686cbadbe59cf33de295217}\label{classR6502_a7780f0ffc686cbadbe59cf33de295217}} 
void {\bfseries decX} ()
\begin{DoxyCompactList}\small\item\em Decrement the X index register. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}{setY}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the Y index register directly. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a63af9a115e47a7acdae0b57affddb5c7}\label{classR6502_a63af9a115e47a7acdae0b57affddb5c7}} 
void {\bfseries incY} ()
\begin{DoxyCompactList}\small\item\em Increment the Y index register. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a3c8068f2edd32fd388ad38a5e246242c}\label{classR6502_a3c8068f2edd32fd388ad38a5e246242c}} 
void {\bfseries decY} ()
\begin{DoxyCompactList}\small\item\em Decrement the Y index register. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}{set\+Accumulator}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set the value of the accumulator. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_aca7646723dc26712851a13a5e8f94c46}{setP}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Set processor status directly. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{classR6502_ab832f67a5d15cacb32a6b718e735db39}{on\+Register\+Update}} ()
\begin{DoxyCompactList}\small\item\em Called everytime a register updates. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a92e0274aa230a47420fed88a0506806f}{IMM}} ()
\begin{DoxyCompactList}\small\item\em Immediate addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a944c6b84e4408567085976fab3047479}{ABS}} ()
\begin{DoxyCompactList}\small\item\em Absolute addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_ac9113367a214712f21f5d54a6d4f86da}{ABX}} ()
\begin{DoxyCompactList}\small\item\em Absolute X addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_ac4bfae4e389c9ec3d0f19a98c74b3e67}{ABY}} ()
\begin{DoxyCompactList}\small\item\em Absolute Y addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_ad79d4ce2b810b29774438d2d9d77d793}{IMP}} ()
\begin{DoxyCompactList}\small\item\em Implied addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a953a07c858ff31c929aa8fdf654fb4bd}{ZP0}} ()
\begin{DoxyCompactList}\small\item\em Zero Page addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a4b4c37d06574c616ca54811db16fdeb3}{ZPX}} ()
\begin{DoxyCompactList}\small\item\em Zero Page (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a5ab8e99ee00f7187d6831948dc26eaad}{ZPY}} ()
\begin{DoxyCompactList}\small\item\em Zero Page (Y-\/indexed) addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_aa27a2fefb1cc2515d99a49019e4914d0}{REL}} ()
\begin{DoxyCompactList}\small\item\em Relative addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a316a5e5bd4a887464e1e6c713f535b2e}{IZX}} ()
\begin{DoxyCompactList}\small\item\em Indirect (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_af126d97c49e41295b1eae184e4920143}{IZY}} ()
\begin{DoxyCompactList}\small\item\em Indirect (X-\/indexed) addressing mode. \end{DoxyCompactList}\item 
uint8\+\_\+t \mbox{\hyperlink{classR6502_a8334ab8b225ff897bf3c9a7e6ccff122}{IND}} ()
\begin{DoxyCompactList}\small\item\em Indirect addressing mode. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classR6502_a9269aa8d3f33b5291ef829438c7eb1d9}\label{classR6502_a9269aa8d3f33b5291ef829438c7eb1d9}} 
uint8\+\_\+t {\bfseries ADC} ()
\item 
\mbox{\Hypertarget{classR6502_addfd53e7ffeaedd8cd5a870d9d9a6a76}\label{classR6502_addfd53e7ffeaedd8cd5a870d9d9a6a76}} 
uint8\+\_\+t {\bfseries AND} ()
\item 
\mbox{\Hypertarget{classR6502_a1534bc10afa194e181fd49264817bf05}\label{classR6502_a1534bc10afa194e181fd49264817bf05}} 
uint8\+\_\+t {\bfseries ASL} ()
\item 
\mbox{\Hypertarget{classR6502_a60296d4a37500c327fb93b32313f705a}\label{classR6502_a60296d4a37500c327fb93b32313f705a}} 
uint8\+\_\+t {\bfseries BCC} ()
\item 
\mbox{\Hypertarget{classR6502_a7adaac918b199b09c88e3240cb4647f4}\label{classR6502_a7adaac918b199b09c88e3240cb4647f4}} 
uint8\+\_\+t {\bfseries BCS} ()
\item 
\mbox{\Hypertarget{classR6502_ade12cb4c17bdf9ea822b2ea45db04cd9}\label{classR6502_ade12cb4c17bdf9ea822b2ea45db04cd9}} 
uint8\+\_\+t {\bfseries BEQ} ()
\item 
\mbox{\Hypertarget{classR6502_ab221a0f3368d6a398b4ac7d68a051dbe}\label{classR6502_ab221a0f3368d6a398b4ac7d68a051dbe}} 
uint8\+\_\+t {\bfseries BIT} ()
\item 
\mbox{\Hypertarget{classR6502_a75b7bc1d1ec2f96afbb5a335ea9d1f0c}\label{classR6502_a75b7bc1d1ec2f96afbb5a335ea9d1f0c}} 
uint8\+\_\+t {\bfseries BMI} ()
\item 
\mbox{\Hypertarget{classR6502_a80321ec92ae0369bb52080c08f94ad20}\label{classR6502_a80321ec92ae0369bb52080c08f94ad20}} 
uint8\+\_\+t {\bfseries BNE} ()
\item 
\mbox{\Hypertarget{classR6502_a497bb1c4e0cbc1278fc5d4c1f80627c8}\label{classR6502_a497bb1c4e0cbc1278fc5d4c1f80627c8}} 
uint8\+\_\+t {\bfseries BPL} ()
\item 
\mbox{\Hypertarget{classR6502_a8d4d4e24f4ff738167f1b200b9962681}\label{classR6502_a8d4d4e24f4ff738167f1b200b9962681}} 
uint8\+\_\+t {\bfseries BRK} ()
\item 
\mbox{\Hypertarget{classR6502_ac23dd1895cf983faf0716c044d86df12}\label{classR6502_ac23dd1895cf983faf0716c044d86df12}} 
uint8\+\_\+t {\bfseries BVC} ()
\item 
\mbox{\Hypertarget{classR6502_a1fd271ac0964d553d47be52889b77c5f}\label{classR6502_a1fd271ac0964d553d47be52889b77c5f}} 
uint8\+\_\+t {\bfseries BVS} ()
\item 
\mbox{\Hypertarget{classR6502_a1e39bdb9b650c6ccc45ae0fa49520c6a}\label{classR6502_a1e39bdb9b650c6ccc45ae0fa49520c6a}} 
uint8\+\_\+t {\bfseries CLC} ()
\item 
\mbox{\Hypertarget{classR6502_a6136d0a7abb0ed247a7473d4dde7275c}\label{classR6502_a6136d0a7abb0ed247a7473d4dde7275c}} 
uint8\+\_\+t {\bfseries CLD} ()
\item 
\mbox{\Hypertarget{classR6502_a9800409fed104b92684921b98f438fa6}\label{classR6502_a9800409fed104b92684921b98f438fa6}} 
uint8\+\_\+t {\bfseries CLI} ()
\item 
\mbox{\Hypertarget{classR6502_a23fd131bff17032f6507b7c534c546ff}\label{classR6502_a23fd131bff17032f6507b7c534c546ff}} 
uint8\+\_\+t {\bfseries CLV} ()
\item 
\mbox{\Hypertarget{classR6502_a2ed18bb94a2e5cb336a96b33213c86c9}\label{classR6502_a2ed18bb94a2e5cb336a96b33213c86c9}} 
uint8\+\_\+t {\bfseries CMP} ()
\item 
\mbox{\Hypertarget{classR6502_a96141149407a82083e8e7e6cf15b365e}\label{classR6502_a96141149407a82083e8e7e6cf15b365e}} 
uint8\+\_\+t {\bfseries CPX} ()
\item 
\mbox{\Hypertarget{classR6502_a0a447bc8226c70fd8b8ef3e71b52a20a}\label{classR6502_a0a447bc8226c70fd8b8ef3e71b52a20a}} 
uint8\+\_\+t {\bfseries CPY} ()
\item 
\mbox{\Hypertarget{classR6502_a4ea66281dbfae0fafd0d206320afbd31}\label{classR6502_a4ea66281dbfae0fafd0d206320afbd31}} 
uint8\+\_\+t {\bfseries DEC} ()
\item 
\mbox{\Hypertarget{classR6502_a058a1e2e11f3899c154f27bfdfa98c72}\label{classR6502_a058a1e2e11f3899c154f27bfdfa98c72}} 
uint8\+\_\+t {\bfseries DEX} ()
\item 
\mbox{\Hypertarget{classR6502_abef9c2df8480256bb2dc4ffe8860cf17}\label{classR6502_abef9c2df8480256bb2dc4ffe8860cf17}} 
uint8\+\_\+t {\bfseries DEY} ()
\item 
\mbox{\Hypertarget{classR6502_a0899cf74a6f057d3cbc8051587747aeb}\label{classR6502_a0899cf74a6f057d3cbc8051587747aeb}} 
uint8\+\_\+t {\bfseries EOR} ()
\item 
\mbox{\Hypertarget{classR6502_a9b973a534d7249656fef5f249a15ede9}\label{classR6502_a9b973a534d7249656fef5f249a15ede9}} 
uint8\+\_\+t {\bfseries INC} ()
\item 
\mbox{\Hypertarget{classR6502_a46c66b920740c23635cafee8a0942712}\label{classR6502_a46c66b920740c23635cafee8a0942712}} 
uint8\+\_\+t {\bfseries INX} ()
\item 
\mbox{\Hypertarget{classR6502_a5b8bd25eb641b860443971c31e0a7316}\label{classR6502_a5b8bd25eb641b860443971c31e0a7316}} 
uint8\+\_\+t {\bfseries INY} ()
\item 
\mbox{\Hypertarget{classR6502_a51e05f4c6f6abe1c173654fad09c8de2}\label{classR6502_a51e05f4c6f6abe1c173654fad09c8de2}} 
uint8\+\_\+t {\bfseries JMP} ()
\item 
\mbox{\Hypertarget{classR6502_a789f3125ba64c57269ad2a5208ec4a1e}\label{classR6502_a789f3125ba64c57269ad2a5208ec4a1e}} 
uint8\+\_\+t {\bfseries JSR} ()
\item 
\mbox{\Hypertarget{classR6502_a8ef4d69b6c4ffde436ae2cc198fe281a}\label{classR6502_a8ef4d69b6c4ffde436ae2cc198fe281a}} 
uint8\+\_\+t {\bfseries LDA} ()
\item 
\mbox{\Hypertarget{classR6502_ac54cfd9d69e078a2eaecc88da5efa4af}\label{classR6502_ac54cfd9d69e078a2eaecc88da5efa4af}} 
uint8\+\_\+t {\bfseries LDX} ()
\item 
\mbox{\Hypertarget{classR6502_a95cba89ca4b108f32c87124592da1aca}\label{classR6502_a95cba89ca4b108f32c87124592da1aca}} 
uint8\+\_\+t {\bfseries LDY} ()
\item 
\mbox{\Hypertarget{classR6502_ab801196cdd33361f89fd8cffce5cb596}\label{classR6502_ab801196cdd33361f89fd8cffce5cb596}} 
uint8\+\_\+t {\bfseries LSR} ()
\item 
\mbox{\Hypertarget{classR6502_a63966d98d4c1087bca09a462b20532d1}\label{classR6502_a63966d98d4c1087bca09a462b20532d1}} 
uint8\+\_\+t {\bfseries NOP} ()
\item 
\mbox{\Hypertarget{classR6502_ae643e47e502facdb24f8c339e0abf170}\label{classR6502_ae643e47e502facdb24f8c339e0abf170}} 
uint8\+\_\+t {\bfseries ORA} ()
\item 
\mbox{\Hypertarget{classR6502_a89783d04a13b78fd2b6472615961a2e7}\label{classR6502_a89783d04a13b78fd2b6472615961a2e7}} 
uint8\+\_\+t {\bfseries PHA} ()
\item 
\mbox{\Hypertarget{classR6502_a345994683927692f65b591058f792930}\label{classR6502_a345994683927692f65b591058f792930}} 
uint8\+\_\+t {\bfseries PHP} ()
\item 
\mbox{\Hypertarget{classR6502_a709e520446a57472e09c0a7cf46dce46}\label{classR6502_a709e520446a57472e09c0a7cf46dce46}} 
uint8\+\_\+t {\bfseries PLA} ()
\item 
\mbox{\Hypertarget{classR6502_ab1314358edb3124334a3a3298581ed0c}\label{classR6502_ab1314358edb3124334a3a3298581ed0c}} 
uint8\+\_\+t {\bfseries PLP} ()
\item 
\mbox{\Hypertarget{classR6502_a6ca728f6f90c1f2ab643984bd50a4662}\label{classR6502_a6ca728f6f90c1f2ab643984bd50a4662}} 
uint8\+\_\+t {\bfseries ROL} ()
\item 
\mbox{\Hypertarget{classR6502_ad213711a289e1def04ebc8474d066f7a}\label{classR6502_ad213711a289e1def04ebc8474d066f7a}} 
uint8\+\_\+t {\bfseries ROR} ()
\item 
\mbox{\Hypertarget{classR6502_ad71b8266b8950d1a6099c92cf018d426}\label{classR6502_ad71b8266b8950d1a6099c92cf018d426}} 
uint8\+\_\+t {\bfseries RTI} ()
\item 
\mbox{\Hypertarget{classR6502_a694d9de5e7111157b467dc3995818857}\label{classR6502_a694d9de5e7111157b467dc3995818857}} 
uint8\+\_\+t {\bfseries RTS} ()
\item 
\mbox{\Hypertarget{classR6502_ac7ea7f05715918a5abbd8deeb70eabac}\label{classR6502_ac7ea7f05715918a5abbd8deeb70eabac}} 
uint8\+\_\+t {\bfseries SBC} ()
\item 
\mbox{\Hypertarget{classR6502_a6dda6705b95f9300d6170c1df9df6a6e}\label{classR6502_a6dda6705b95f9300d6170c1df9df6a6e}} 
uint8\+\_\+t {\bfseries SEC} ()
\item 
\mbox{\Hypertarget{classR6502_a69e183d32452ae20af6779f6b79e422b}\label{classR6502_a69e183d32452ae20af6779f6b79e422b}} 
uint8\+\_\+t {\bfseries SED} ()
\item 
\mbox{\Hypertarget{classR6502_aa767b76b403a3b0256d4e09e69a5c5a7}\label{classR6502_aa767b76b403a3b0256d4e09e69a5c5a7}} 
uint8\+\_\+t {\bfseries SEI} ()
\item 
\mbox{\Hypertarget{classR6502_a970c111cb9c8bdfabf253df4a95691cc}\label{classR6502_a970c111cb9c8bdfabf253df4a95691cc}} 
uint8\+\_\+t {\bfseries STA} ()
\item 
\mbox{\Hypertarget{classR6502_a39f3d9d7fb0f9e3311421a02aa2fb590}\label{classR6502_a39f3d9d7fb0f9e3311421a02aa2fb590}} 
uint8\+\_\+t {\bfseries STX} ()
\item 
\mbox{\Hypertarget{classR6502_a4a97a84ff3923b5aa326b4c158cd1494}\label{classR6502_a4a97a84ff3923b5aa326b4c158cd1494}} 
uint8\+\_\+t {\bfseries STY} ()
\item 
\mbox{\Hypertarget{classR6502_a475f6fe985ffa426ce3a9baad7bf897d}\label{classR6502_a475f6fe985ffa426ce3a9baad7bf897d}} 
uint8\+\_\+t {\bfseries TAX} ()
\item 
\mbox{\Hypertarget{classR6502_acebdbdef10ad3712aeb169bff0413cf3}\label{classR6502_acebdbdef10ad3712aeb169bff0413cf3}} 
uint8\+\_\+t {\bfseries TAY} ()
\item 
\mbox{\Hypertarget{classR6502_a0f38255ab71248abf0bd1477c1849042}\label{classR6502_a0f38255ab71248abf0bd1477c1849042}} 
uint8\+\_\+t {\bfseries TSX} ()
\item 
\mbox{\Hypertarget{classR6502_ae154492eea06645878b620d7dcf290f4}\label{classR6502_ae154492eea06645878b620d7dcf290f4}} 
uint8\+\_\+t {\bfseries TXA} ()
\item 
\mbox{\Hypertarget{classR6502_a6955f857f5a5e82b26ab43c21a958a05}\label{classR6502_a6955f857f5a5e82b26ab43c21a958a05}} 
uint8\+\_\+t {\bfseries TXS} ()
\item 
\mbox{\Hypertarget{classR6502_a7fa76b23af8ae0a3fb4d44b65f1c68d4}\label{classR6502_a7fa76b23af8ae0a3fb4d44b65f1c68d4}} 
uint8\+\_\+t {\bfseries TYA} ()
\item 
\mbox{\Hypertarget{classR6502_a96b4aa2484154365a018ab0e5978e1dd}\label{classR6502_a96b4aa2484154365a018ab0e5978e1dd}} 
uint8\+\_\+t {\bfseries XXX} ()
\end{DoxyCompactItemize}
\doxysubsection*{Static Private Member Functions}
\begin{DoxyCompactItemize}
\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a1330df49e1dac7c1214471e46b72b799}{is\+Zero}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is byte a zero? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_ab77ef3817101db242431880fbdc297e8}{is\+Zero}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte a zero? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a423ffaca5454cc8d76aa257b941815c8}{is\+Negative}} (uint8\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is byte negative? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}{is\+Negative}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte negative? \end{DoxyCompactList}\item 
static uint8\+\_\+t \mbox{\hyperlink{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}{is\+Carry}} (uint16\+\_\+t)
\begin{DoxyCompactList}\small\item\em Is double byte indicative of a carry occuring? \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsection*{Private Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classR6502_a713d0c9558f5c98567d76665b24c3e24}\label{classR6502_a713d0c9558f5c98567d76665b24c3e24}} 
\mbox{\hyperlink{classBus}{Bus}} $\ast$ {\bfseries bus} = nullptr
\item 
\mbox{\Hypertarget{classR6502_a395e1c94a04aad0c34f5d6f58f1a8508}\label{classR6502_a395e1c94a04aad0c34f5d6f58f1a8508}} 
uint8\+\_\+t {\bfseries opcode} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a43c0b2b78cc2f861b3f59e3567a1ac7a}\label{classR6502_a43c0b2b78cc2f861b3f59e3567a1ac7a}} 
uint16\+\_\+t {\bfseries abs\+Addr} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_a2e0798671bfd17a2d5bee714c3343163}\label{classR6502_a2e0798671bfd17a2d5bee714c3343163}} 
uint16\+\_\+t {\bfseries rel\+Addr} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_abc99398c35222144d6ead68c1f7dc15a}\label{classR6502_abc99398c35222144d6ead68c1f7dc15a}} 
uint8\+\_\+t {\bfseries operand} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a3c0948012c9174297c39858ad67ef14d}\label{classR6502_a3c0948012c9174297c39858ad67ef14d}} 
uint16\+\_\+t {\bfseries tmp} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_a30ad21204254a3ca2241f8fd87469735}\label{classR6502_a30ad21204254a3ca2241f8fd87469735}} 
uint16\+\_\+t {\bfseries cycles} = 0
\item 
\mbox{\Hypertarget{classR6502_ae7d8f78f1a6d1e8c5dc816ef7df4a228}\label{classR6502_ae7d8f78f1a6d1e8c5dc816ef7df4a228}} 
uint64\+\_\+t {\bfseries total\+Cycles\+Passed} = 0
\item 
\mbox{\Hypertarget{classR6502_a54ce54bb931b31fe65ab934a13e9f2d8}\label{classR6502_a54ce54bb931b31fe65ab934a13e9f2d8}} 
uint8\+\_\+t {\bfseries accumulator} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a12a0443acf092644bb16c91c55cae7c5}\label{classR6502_a12a0443acf092644bb16c91c55cae7c5}} 
uint8\+\_\+t {\bfseries x} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a3f2eb0d383644ab3bc9772128fc8d775}\label{classR6502_a3f2eb0d383644ab3bc9772128fc8d775}} 
uint8\+\_\+t {\bfseries y} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a5a44f178f99dcb6053b3723f3c095289}\label{classR6502_a5a44f178f99dcb6053b3723f3c095289}} 
uint16\+\_\+t {\bfseries pc} = 0x0000
\item 
\mbox{\Hypertarget{classR6502_abf1451cc626003b6ec5d6099e257a2dc}\label{classR6502_abf1451cc626003b6ec5d6099e257a2dc}} 
uint8\+\_\+t {\bfseries sp} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a58b552e6f87135a80613b352e48f5282}\label{classR6502_a58b552e6f87135a80613b352e48f5282}} 
uint8\+\_\+t {\bfseries P} = 0x00
\item 
\mbox{\Hypertarget{classR6502_a2a47e3114022c38dbee8203969333534}\label{classR6502_a2a47e3114022c38dbee8203969333534}} 
std\+::vector$<$ \mbox{\hyperlink{structR6502_1_1Instruction}{Instruction}} $>$ {\bfseries instruction\+Matrix}
\end{DoxyCompactItemize}


\doxysubsection{Member Function Documentation}
\mbox{\Hypertarget{classR6502_a944c6b84e4408567085976fab3047479}\label{classR6502_a944c6b84e4408567085976fab3047479}} 
\index{R6502@{R6502}!ABS@{ABS}}
\index{ABS@{ABS}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ABS()}{ABS()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ABS (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Absolute addressing mode. 

Second byte has low order byte of effective address, third has higher order byte (reminder again\+: 6502 is little endian!!!) That means ABS instructions can acess all 64KB of address space. 2$^\wedge$8 = 0x100 2 byte addressing... 0x100 $\ast$ 0x100 = 0x10000 (64KB)

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ac9113367a214712f21f5d54a6d4f86da}\label{classR6502_ac9113367a214712f21f5d54a6d4f86da}} 
\index{R6502@{R6502}!ABX@{ABX}}
\index{ABX@{ABX}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ABX()}{ABX()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ABX (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Absolute X addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ac4bfae4e389c9ec3d0f19a98c74b3e67}\label{classR6502_ac4bfae4e389c9ec3d0f19a98c74b3e67}} 
\index{R6502@{R6502}!ABY@{ABY}}
\index{ABY@{ABY}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ABY()}{ABY()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ABY (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Absolute Y addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a82e3c80b625a84f3d1fe63885c35a204}\label{classR6502_a82e3c80b625a84f3d1fe63885c35a204}} 
\index{R6502@{R6502}!connectBus@{connectBus}}
\index{connectBus@{connectBus}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{connectBus()}{connectBus()}}
{\footnotesize\ttfamily void R6502\+::connect\+Bus (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classBus}{Bus}} $\ast$}]{b }\end{DoxyParamCaption})}



Sets the CPU\textquotesingle{}s bus. That\textquotesingle{}s all. 


\begin{DoxyParams}{Parameters}
{\em b} & \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}\label{classR6502_a372c35eb3f5e0f0666504a4b26bf9d88}} 
\index{R6502@{R6502}!doCycle@{doCycle}}
\index{doCycle@{doCycle}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doCycle()}{doCycle()}}
{\footnotesize\ttfamily void R6502\+::do\+Cycle (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Executes when a cycle occurs. 

Good for capturing clock cycles. \mbox{\Hypertarget{classR6502_ae65b642474bd73978e218965c58dc45d}\label{classR6502_ae65b642474bd73978e218965c58dc45d}} 
\index{R6502@{R6502}!doRelBranch@{doRelBranch}}
\index{doRelBranch@{doRelBranch}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{doRelBranch()}{doRelBranch()}}
{\footnotesize\ttfamily void R6502\+::do\+Rel\+Branch (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Performs relative branching. 

Very frequent operation in instructions... Useful method for cutting down on bugs. \mbox{\Hypertarget{classR6502_af23243f6579040097fb658e65b118cc8}\label{classR6502_af23243f6579040097fb658e65b118cc8}} 
\index{R6502@{R6502}!fetchOperand@{fetchOperand}}
\index{fetchOperand@{fetchOperand}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{fetchOperand()}{fetchOperand()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::fetch\+Operand (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Reads from the currently relevant absolute address. 

This is almost always the operand of an instruction)

\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ The operand in most cases. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ac56bb2f19d81aa102131952138b834d2}\label{classR6502_ac56bb2f19d81aa102131952138b834d2}} 
\index{R6502@{R6502}!getFlag@{getFlag}}
\index{getFlag@{getFlag}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{getFlag()}{getFlag()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::get\+Flag (\begin{DoxyParamCaption}\item[{FLAGS}]{flag }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



returns the BIT value of a flag 


\begin{DoxyParams}{Parameters}
{\em flag} & The flag of the bit you want. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t 1 or 0. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a92e0274aa230a47420fed88a0506806f}\label{classR6502_a92e0274aa230a47420fed88a0506806f}} 
\index{R6502@{R6502}!IMM@{IMM}}
\index{IMM@{IMM}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IMM()}{IMM()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+IMM (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Immediate addressing mode. 

Next byte has operand. get current pc, then increment.

\begin{DoxyReturn}{Returns}
uint8\+\_\+t 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ad79d4ce2b810b29774438d2d9d77d793}\label{classR6502_ad79d4ce2b810b29774438d2d9d77d793}} 
\index{R6502@{R6502}!IMP@{IMP}}
\index{IMP@{IMP}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IMP()}{IMP()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+IMP (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Implied addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a8334ab8b225ff897bf3c9a7e6ccff122}\label{classR6502_a8334ab8b225ff897bf3c9a7e6ccff122}} 
\index{R6502@{R6502}!IND@{IND}}
\index{IND@{IND}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IND()}{IND()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+IND (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Indirect addressing mode. 

Things start to look weird here in order to simulate a bug in the CPU. From hnesdev.\+icequake.\+net/6502bugs.txt\+: \char`\"{}\+An indirect JMP (xx\+FF) will fail because the MSB will be fetched from address xx00 instead of page xx+1.\char`\"{} DO NOT simplify this. Need to make the bug clear and show details.

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}\label{classR6502_a4c3c8a2ba83550fdf78cc5fd090b4b08}} 
\index{R6502@{R6502}!IRQ@{IRQ}}
\index{IRQ@{IRQ}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IRQ()}{IRQ()}}
{\footnotesize\ttfamily void R6502\+::\+IRQ (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



IRQ interrupt sequence command. 

\href{http://archive.6502.org/datasheets/synertek_programming_manual.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/synertek\+\_\+programming\+\_\+manual.\+pdf}} -\/ p. 131 \href{https://www.nesdev.org/wiki/CPU_interrupts}{\texttt{ https\+://www.\+nesdev.\+org/wiki/\+CPU\+\_\+interrupts}} \mbox{\Hypertarget{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}\label{classR6502_a5b29b84a3ee80be67dfa3bc16173e932}} 
\index{R6502@{R6502}!isCarry@{isCarry}}
\index{isCarry@{isCarry}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isCarry()}{isCarry()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Carry (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte indicative of a carry occuring? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Carry flag (true) if a carry occured and zero (false) if no carry occured. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}\label{classR6502_af30bb6c9a64ba367f312cbb350fd9d64}} 
\index{R6502@{R6502}!isNegative@{isNegative}}
\index{isNegative@{isNegative}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isNegative()}{isNegative()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Negative (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte negative? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Negative flag (true) if negative and zero (false) if not negative. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a423ffaca5454cc8d76aa257b941815c8}\label{classR6502_a423ffaca5454cc8d76aa257b941815c8}} 
\index{R6502@{R6502}!isNegative@{isNegative}}
\index{isNegative@{isNegative}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isNegative()}{isNegative()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Negative (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is byte negative? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Negative flag (true) if negative and zero (false) if not negative. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_ab77ef3817101db242431880fbdc297e8}\label{classR6502_ab77ef3817101db242431880fbdc297e8}} 
\index{R6502@{R6502}!isZero@{isZero}}
\index{isZero@{isZero}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isZero()}{isZero()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Zero (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{double\+Byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is double byte a zero? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Zero flag (true) if zero and zero (false) if not zero. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a1330df49e1dac7c1214471e46b72b799}\label{classR6502_a1330df49e1dac7c1214471e46b72b799}} 
\index{R6502@{R6502}!isZero@{isZero}}
\index{isZero@{isZero}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{isZero()}{isZero()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::is\+Zero (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [private]}}



Is byte a zero? 


\begin{DoxyParams}{Parameters}
{\em byte} & \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t -\/ Returns the Zero flag (true) if zero and zero (false) if not zero. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a316a5e5bd4a887464e1e6c713f535b2e}\label{classR6502_a316a5e5bd4a887464e1e6c713f535b2e}} 
\index{R6502@{R6502}!IZX@{IZX}}
\index{IZX@{IZX}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IZX()}{IZX()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+IZX (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Indirect (X-\/indexed) addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_af126d97c49e41295b1eae184e4920143}\label{classR6502_af126d97c49e41295b1eae184e4920143}} 
\index{R6502@{R6502}!IZY@{IZY}}
\index{IZY@{IZY}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{IZY()}{IZY()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+IZY (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Indirect (X-\/indexed) addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}\label{classR6502_a343ece93fe35fa7f4c030a8352dc8e36}} 
\index{R6502@{R6502}!NMI@{NMI}}
\index{NMI@{NMI}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{NMI()}{NMI()}}
{\footnotesize\ttfamily void R6502\+::\+NMI (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



NMI interrupt sequence command. 

\href{http://archive.6502.org/datasheets/synertek_programming_manual.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/synertek\+\_\+programming\+\_\+manual.\+pdf}} -\/ p. 131 \href{https://www.nesdev.org/wiki/CPU_interrupts}{\texttt{ https\+://www.\+nesdev.\+org/wiki/\+CPU\+\_\+interrupts}} \mbox{\Hypertarget{classR6502_ab832f67a5d15cacb32a6b718e735db39}\label{classR6502_ab832f67a5d15cacb32a6b718e735db39}} 
\index{R6502@{R6502}!onRegisterUpdate@{onRegisterUpdate}}
\index{onRegisterUpdate@{onRegisterUpdate}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{onRegisterUpdate()}{onRegisterUpdate()}}
{\footnotesize\ttfamily void R6502\+::on\+Register\+Update (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Called everytime a register updates. 

Useful for logging. \mbox{\Hypertarget{classR6502_a96bd67071c7f130a60a69b9008f8cae5}\label{classR6502_a96bd67071c7f130a60a69b9008f8cae5}} 
\index{R6502@{R6502}!pullStack@{pullStack}}
\index{pullStack@{pullStack}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pullStack()}{pullStack()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::pull\+Stack (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Pull the stack. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Top value on stack. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a41863794dd7b4df05c79ca459dae2704}\label{classR6502_a41863794dd7b4df05c79ca459dae2704}} 
\index{R6502@{R6502}!pullStack16@{pullStack16}}
\index{pullStack16@{pullStack16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pullStack16()}{pullStack16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::pull\+Stack16 (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Pull a double byute from the stack (2 pulls). 

\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte on the stack. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a5b3741ac52180036e740e62092b54fa3}\label{classR6502_a5b3741ac52180036e740e62092b54fa3}} 
\index{R6502@{R6502}!pushStack@{pushStack}}
\index{pushStack@{pushStack}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pushStack()}{pushStack()}}
{\footnotesize\ttfamily void R6502\+::push\+Stack (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Push byte onto the stack. 


\begin{DoxyParams}{Parameters}
{\em byte} & The value to push to the stack. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a479df391455a114c43bcfba60c5f84d4}\label{classR6502_a479df391455a114c43bcfba60c5f84d4}} 
\index{R6502@{R6502}!pushStack16@{pushStack16}}
\index{pushStack16@{pushStack16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{pushStack16()}{pushStack16()}}
{\footnotesize\ttfamily void R6502\+::push\+Stack16 (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{dbyte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Push double byte to the stack. 


\begin{DoxyParams}{Parameters}
{\em dbyte} & The double byte to push to the stack. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}\label{classR6502_a885aedd2a3eedb5f5e3586b5cc5ccd47}} 
\index{R6502@{R6502}!read@{read}}
\index{read@{read}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{read()}{read()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::read (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address. 


\begin{DoxyParams}{Parameters}
{\em addr} & Address of data \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t The data 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a4e1cd10e7f368135d54485d94d8cf657}\label{classR6502_a4e1cd10e7f368135d54485d94d8cf657}} 
\index{R6502@{R6502}!read16@{read16}}
\index{read16@{read16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{read16()}{read16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::read16 (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read a double byte and handle the 6502\textquotesingle{}s little endian nature. 


\begin{DoxyParams}{Parameters}
{\em addr} & Initial address of double byte. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}\label{classR6502_a7b1c92c89fba856db7bf4ffdeccf8e04}} 
\index{R6502@{R6502}!readPC@{readPC}}
\index{readPC@{readPC}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{readPC()}{readPC()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::read\+PC (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address in PC and then increment PC. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t The data 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}\label{classR6502_afa22519b4597a38f78c4dd6cbf9f2980}} 
\index{R6502@{R6502}!readPC16@{readPC16}}
\index{readPC16@{readPC16}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{readPC16()}{readPC16()}}
{\footnotesize\ttfamily uint16\+\_\+t R6502\+::read\+PC16 (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Read byte at address in PC, increment PC, and then repeat again for the double byte. 

\begin{DoxyReturn}{Returns}
uint16\+\_\+t The double byte. 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_aa27a2fefb1cc2515d99a49019e4914d0}\label{classR6502_aa27a2fefb1cc2515d99a49019e4914d0}} 
\index{R6502@{R6502}!REL@{REL}}
\index{REL@{REL}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{REL()}{REL()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+REL (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Relative addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a2737d72976d543cd11d6d23531844b48}\label{classR6502_a2737d72976d543cd11d6d23531844b48}} 
\index{R6502@{R6502}!RES@{RES}}
\index{RES@{RES}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{RES()}{RES()}}
{\footnotesize\ttfamily void R6502\+::\+RES (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Reset command. 

\href{https://wiki.nesdev.org/w/index.php?title=CPU_power_up_state}{\texttt{ https\+://wiki.\+nesdev.\+org/w/index.\+php?title=\+CPU\+\_\+power\+\_\+up\+\_\+state}} (Page 2 under RESET (RES)) \href{http://archive.6502.org/datasheets/rockwell_r650x_r651x.pdf}{\texttt{ http\+://archive.\+6502.\+org/datasheets/rockwell\+\_\+r650x\+\_\+r651x.\+pdf}} \mbox{\Hypertarget{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}\label{classR6502_a60aaef21584079cd5d57f32ac4cf8f59}} 
\index{R6502@{R6502}!setAccumulator@{setAccumulator}}
\index{setAccumulator@{setAccumulator}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setAccumulator()}{setAccumulator()}}
{\footnotesize\ttfamily void R6502\+::set\+Accumulator (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the value of the accumulator. 


\begin{DoxyParams}{Parameters}
{\em byte} & New accumulator value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a1e8be351a6ef67497c7723af923ce311}\label{classR6502_a1e8be351a6ef67497c7723af923ce311}} 
\index{R6502@{R6502}!setBitsOfByte@{setBitsOfByte}}
\index{setBitsOfByte@{setBitsOfByte}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setBitsOfByte()}{setBitsOfByte()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::set\+Bits\+Of\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{bits\+To\+Change,  }\item[{uint8\+\_\+t}]{value,  }\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



sets bits of a byte based on a mask byte and a byte representing what to change them to. 


\begin{DoxyParams}{Parameters}
{\em bits\+To\+Change} & The byte mask. \\
\hline
{\em value} & The values to set the bits specified by the mask to. \\
\hline
{\em byte} & The original byte to modify. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
uint8\+\_\+t 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}\label{classR6502_aa435f7321be2e8166f03c7fc0cd542f8}} 
\index{R6502@{R6502}!setFlags@{setFlags}}
\index{setFlags@{setFlags}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setFlags()}{setFlags()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily void R6502\+::set\+Flags (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{flags }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set specific flags to 1. 


\begin{DoxyParams}{Parameters}
{\em flags} & The flags to set. e.\+g. Z $\vert$ N $\vert$ C to set the Z, N, and C flags to one. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a6167fd22e3883eb1343d4c874836d90b}\label{classR6502_a6167fd22e3883eb1343d4c874836d90b}} 
\index{R6502@{R6502}!setFlags@{setFlags}}
\index{setFlags@{setFlags}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setFlags()}{setFlags()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily void R6502\+::set\+Flags (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{flags,  }\item[{uint8\+\_\+t}]{value }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Sets flags to a specific value. 


\begin{DoxyParams}{Parameters}
{\em flags} & The flags to set. e.\+g. Z $\vert$ N $\vert$ C to set the Z, N, and C flags. \\
\hline
{\em value} & The value to set them to. i.\+e. 1 or 0 \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_aca7646723dc26712851a13a5e8f94c46}\label{classR6502_aca7646723dc26712851a13a5e8f94c46}} 
\index{R6502@{R6502}!setP@{setP}}
\index{setP@{setP}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setP()}{setP()}}
{\footnotesize\ttfamily void R6502\+::setP (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set processor status directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New processor status. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}\label{classR6502_a2991b29e11c4d9c7bf28e0c3229a3056}} 
\index{R6502@{R6502}!setPC@{setPC}}
\index{setPC@{setPC}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setPC()}{setPC()}}
{\footnotesize\ttfamily void R6502\+::set\+PC (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the value in the PC directly. 


\begin{DoxyParams}{Parameters}
{\em addr} & The address to store in the PC. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_accad1075998275c1628a742c9d339222}\label{classR6502_accad1075998275c1628a742c9d339222}} 
\index{R6502@{R6502}!setSP@{setSP}}
\index{setSP@{setSP}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setSP()}{setSP()}}
{\footnotesize\ttfamily void R6502\+::set\+SP (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the stack pointer directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New pointer value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a6c2db075d3eb24ee8228eef6da558cab}\label{classR6502_a6c2db075d3eb24ee8228eef6da558cab}} 
\index{R6502@{R6502}!setX@{setX}}
\index{setX@{setX}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setX()}{setX()}}
{\footnotesize\ttfamily void R6502\+::setX (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the X index register value directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New X index value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}\label{classR6502_a9a779fd6556c39a4e0febd257da1e8ea}} 
\index{R6502@{R6502}!setY@{setY}}
\index{setY@{setY}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{setY()}{setY()}}
{\footnotesize\ttfamily void R6502\+::setY (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{byte }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Set the Y index register directly. 


\begin{DoxyParams}{Parameters}
{\em byte} & New Y index value. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_ac63aea4327d06c712e387355aa45634c}\label{classR6502_ac63aea4327d06c712e387355aa45634c}} 
\index{R6502@{R6502}!write@{write}}
\index{write@{write}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{write()}{write()}}
{\footnotesize\ttfamily void R6502\+::write (\begin{DoxyParamCaption}\item[{uint16\+\_\+t}]{addr,  }\item[{uint8\+\_\+t}]{data }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Write a byte at an address. 


\begin{DoxyParams}{Parameters}
{\em addr} & The address to write to. \\
\hline
{\em data} & The data to write. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classR6502_a953a07c858ff31c929aa8fdf654fb4bd}\label{classR6502_a953a07c858ff31c929aa8fdf654fb4bd}} 
\index{R6502@{R6502}!ZP0@{ZP0}}
\index{ZP0@{ZP0}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ZP0()}{ZP0()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ZP0 (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Zero Page addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a4b4c37d06574c616ca54811db16fdeb3}\label{classR6502_a4b4c37d06574c616ca54811db16fdeb3}} 
\index{R6502@{R6502}!ZPX@{ZPX}}
\index{ZPX@{ZPX}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ZPX()}{ZPX()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ZPX (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Zero Page (X-\/indexed) addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}
\mbox{\Hypertarget{classR6502_a5ab8e99ee00f7187d6831948dc26eaad}\label{classR6502_a5ab8e99ee00f7187d6831948dc26eaad}} 
\index{R6502@{R6502}!ZPY@{ZPY}}
\index{ZPY@{ZPY}!R6502@{R6502}}
\doxysubsubsection{\texorpdfstring{ZPY()}{ZPY()}}
{\footnotesize\ttfamily uint8\+\_\+t R6502\+::\+ZPY (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [private]}}



Zero Page (Y-\/indexed) addressing mode. 

\begin{DoxyReturn}{Returns}
uint8\+\_\+t Extra cycle possible? 
\end{DoxyReturn}


The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
src/R6502.\+h\item 
src/R6502.\+cpp\end{DoxyCompactItemize}
